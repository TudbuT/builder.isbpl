"#stream.isbpl" include

def ProcessBuilder "java.lang.ProcessBuilder" JIO class =ProcessBuilder
def URL "java.net.URL" JIO class =URL
def String "java.lang.String" JIO class =String
def File "java.io.File" JIO class =File

def deps 

func download {
    with url ;
    ("lib" File°new1)°mkdir0 pop
    (url URL)°new1 =url
    def name (url°getPath0 "/" )°strsplit =name
    (name (name°alen 1 -))°aget =name
    "\n> Downloading " puts
    name puts
    "..." puts
    (("lib/" name)°strconcat File°new1)°exists0 if {
        "\n: Skipped. (Force by deleting lib/" puts name puts ")" puts
        name
        2 stop
    }
    def inp
    "Java" try {
        url°openStream0 =inp
    } {
        pop pop °printStackTrace0
        "\n: Download failed." puts
        name
        2 stop
    }
    def file ("lib/" name)°strconcat STREAM.create.file.out stream =file
    def x
    while { inp°read0 dup =x -1 eq not } {
        x file STREAM.write stream
    }
    name
}

func build {
    def script "build.sh" STREAM.create.file.out stream =script
    "\n> Generating javac command..." puts
    "rm build.sh\n" script stream.write
    "mkdir build > /dev/null 2>&1\n" script stream.write
    "mkdir src > /dev/null 2>&1\n" script stream.write
    "mkdir -p res/META-INF > /dev/null 2>&1\n" script stream.write
    "mkdir lib > /dev/null 2>&1\n" script stream.write
    "cd src ; find . | grep '\\.java$' | sed 's/^\\.\\/\\(.*\\)$/\\1/g' > ../build/buildfiles.txt\n" script stream.write
    "javac -d ../build " script stream.write
    deps°alen if {
        "-cp " script stream.write
        {
            with dep ;
            "'../lib/" script stream.write
            dep script stream.write
            "':" script stream.write
        } deps foreach
    }
    " @../build/buildfiles.txt\n" script stream.write
    "E=$?" script stream.write
    "cd .. ; rm build/buildfiles.txt\n" script stream.write
    "exit $E" script stream.write
    script STREAM.close stream
    "\n> Running javac...\n" puts
    ([ "bash" "build.sh" ] ProcessBuilder°new1)°inheritIO0°start0°waitFor0
    0 eq not if {
        ": javac failed!" puts
        1 exit
    }
}

func run {
    def script "run.sh" STREAM.create.file.out stream =script
    "\n> Generating run command..." puts
    "java -cp res:build:" script stream.write
    {
        with dep ;
        "'lib/" script stream.write
        dep script stream.write
        "':" script stream.write
    } deps foreach
    " " script stream.write
    mainClass script stream.write
    "\n" script stream.write
    "exit $?" script stream.write
    script STREAM.close stream
    "\n> Running\n" puts
    ([ "bash" "run.sh" ] ProcessBuilder°new1)°inheritIO0°start0°waitFor0
    0 eq not if {
        ": Run failed!\n" puts
        1 exit
    }
}

func jar {
    def script "jar.sh" STREAM.create.file.out stream =script
    "\n> Generating jar builder..." puts
    "rm jar.sh\n" script stream.write
    "mkdir jar > /dev/null 2>&1\n" script stream.write
    {
        with dep ;
        "cp 'lib/" script stream.write
        dep script stream.write
        "' jar\n" script stream.write
        "cd jar ; unzip '" script stream.write
        dep script stream.write
        "' ; rm '" script stream.write
        dep script stream.write
        "' ; cd ..\n" script stream.write
    } deps foreach
    "cp -r build/* jar\n" script stream.write
    "cp -r res/* jar\n" script stream.write
    "rm '" script stream.write
    name script stream.write
    ".jar'\n" script stream.write
    "cd jar\n" script stream.write
    "zip -r ../'" script stream.write
    name script stream.write
    ".jar' *\n" script stream.write
    "cd .. ; rm -rf jar\n" script stream.write
    script STREAM.close stream
    "\n> Building jarfile...\n" puts
    ([ "bash" "jar.sh" ] ProcessBuilder°new1)°inheritIO0°start0°waitFor0 pop
}

func makeManifest {
    def file "res/META-INF/MANIFEST.MF" STREAM.create.file.out stream =file
    "\n> Generating manifest..." puts
    "Manifest-Version: 1.0\n" file stream.write
    "Main-Class: " file stream.write
    mainClass file stream.write
    "\n" file stream.write
    file STREAM.close stream
}

func clean {
    def script "clean.sh" STREAM.create.file.out stream =script
    "\n> Cleaning..." puts
    "rm clean.sh\n" script stream.write
    {
        with file ;
        "rm -rf '" script stream.write
        file script stream.write
        "'\n" script stream.write
    } [ 
        "build"
        "lib"
        name ".jar" strconcat
        "run.sh"
    ] foreach
    script STREAM.close stream
    ([ "bash" "clean.sh" ] ProcessBuilder°new1)°inheritIO0°start0°waitFor0 pop
}

def tasks [ "clean" "build" "makeManifest" "run" "jar" ] =tasks

func task {
    [ swap ] tasks aadd =tasks
}

"Placeholders begin" #
def mainClass "Main" =mainClass
def name "placeholder" =name
func dependencies { }
"Placeholders end" #

func main {
    with args ;
    [ dependencies ] =deps
    {
        with arg ;
        {
            with task ;
            arg task eq if {
                task 0 _layer_call
            }
        } tasks foreach
    } args foreach
    "\n" puts
    0
}
